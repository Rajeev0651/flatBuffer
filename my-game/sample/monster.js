"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
var flatbuffers = require("flatbuffers");
var color_1 = require("../../my-game/sample/color");
var equipment_1 = require("../../my-game/sample/equipment");
var vec3_1 = require("../../my-game/sample/vec3");
var weapon_1 = require("../../my-game/sample/weapon");
var Monster = /** @class */ (function () {
    function Monster() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Monster.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Monster.getRootAsMonster = function (bb, obj) {
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Monster.getSizePrefixedRootAsMonster = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Monster.prototype.pos = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new vec3_1.Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    };
    Monster.prototype.mana = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 150;
    };
    Monster.prototype.hp = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 100;
    };
    Monster.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Monster.prototype.inventory = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Monster.prototype.inventoryLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Monster.prototype.inventoryArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Monster.prototype.color = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : color_1.Color.Blue;
    };
    Monster.prototype.weapons = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new weapon_1.Weapon()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Monster.prototype.weaponsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Monster.prototype.equippedType = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : equipment_1.Equipment.NONE;
    };
    Monster.prototype.equipped = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    Monster.prototype.path = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? (obj || new vec3_1.Vec3()).__init(this.bb.__vector(this.bb_pos + offset) + index * 12, this.bb) : null;
    };
    Monster.prototype.pathLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Monster.startMonster = function (builder) {
        builder.startObject(11);
    };
    Monster.addPos = function (builder, posOffset) {
        builder.addFieldStruct(0, posOffset, 0);
    };
    Monster.addMana = function (builder, mana) {
        builder.addFieldInt16(1, mana, 150);
    };
    Monster.addHp = function (builder, hp) {
        builder.addFieldInt16(2, hp, 100);
    };
    Monster.addName = function (builder, nameOffset) {
        builder.addFieldOffset(3, nameOffset, 0);
    };
    Monster.addInventory = function (builder, inventoryOffset) {
        builder.addFieldOffset(5, inventoryOffset, 0);
    };
    Monster.createInventoryVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Monster.startInventoryVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Monster.addColor = function (builder, color) {
        builder.addFieldInt8(6, color, color_1.Color.Blue);
    };
    Monster.addWeapons = function (builder, weaponsOffset) {
        builder.addFieldOffset(7, weaponsOffset, 0);
    };
    Monster.createWeaponsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Monster.startWeaponsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Monster.addEquippedType = function (builder, equippedType) {
        builder.addFieldInt8(8, equippedType, equipment_1.Equipment.NONE);
    };
    Monster.addEquipped = function (builder, equippedOffset) {
        builder.addFieldOffset(9, equippedOffset, 0);
    };
    Monster.addPath = function (builder, pathOffset) {
        builder.addFieldOffset(10, pathOffset, 0);
    };
    Monster.startPathVector = function (builder, numElems) {
        builder.startVector(12, numElems, 4);
    };
    Monster.endMonster = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Monster.finishMonsterBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    Monster.finishSizePrefixedMonsterBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    Monster.createMonster = function (builder, posOffset, mana, hp, nameOffset, inventoryOffset, color, weaponsOffset, equippedType, equippedOffset, pathOffset) {
        Monster.startMonster(builder);
        Monster.addPos(builder, posOffset);
        Monster.addMana(builder, mana);
        Monster.addHp(builder, hp);
        Monster.addName(builder, nameOffset);
        Monster.addInventory(builder, inventoryOffset);
        Monster.addColor(builder, color);
        Monster.addWeapons(builder, weaponsOffset);
        Monster.addEquippedType(builder, equippedType);
        Monster.addEquipped(builder, equippedOffset);
        Monster.addPath(builder, pathOffset);
        return Monster.endMonster(builder);
    };
    return Monster;
}());
exports.Monster = Monster;
